// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UITreeNodePB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UITreeNodePB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UITreeNodePB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UITreeNodePB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UITreeNodePB_2eproto {
  static const uint32_t offsets[];
};
class UITreeNodePB;
struct UITreeNodePBDefaultTypeInternal;
extern UITreeNodePBDefaultTypeInternal _UITreeNodePB_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::UITreeNodePB* Arena::CreateMaybeMessage<::UITreeNodePB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UITreeNodePB final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:UITreeNodePB) */ {
 public:
  inline UITreeNodePB() : UITreeNodePB(nullptr) {}
  ~UITreeNodePB() override;
  explicit PROTOBUF_CONSTEXPR UITreeNodePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UITreeNodePB(const UITreeNodePB& from);
  UITreeNodePB(UITreeNodePB&& from) noexcept
    : UITreeNodePB() {
    *this = ::std::move(from);
  }

  inline UITreeNodePB& operator=(const UITreeNodePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline UITreeNodePB& operator=(UITreeNodePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UITreeNodePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const UITreeNodePB* internal_default_instance() {
    return reinterpret_cast<const UITreeNodePB*>(
               &_UITreeNodePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UITreeNodePB& a, UITreeNodePB& b) {
    a.Swap(&b);
  }
  inline void Swap(UITreeNodePB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UITreeNodePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UITreeNodePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UITreeNodePB>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UITreeNodePB& from);
  void MergeFrom(const UITreeNodePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UITreeNodePB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UITreeNodePB";
  }
  protected:
  explicit UITreeNodePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 17,
    kNameFieldNumber = 12,
    kTextFieldNumber = 13,
    kSetTextFieldNumber = 14,
    kHintFieldNumber = 15,
    kPythonObjectTypeNameFieldNumber = 16,
    kTopFieldNumber = 1,
    kLeftFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kDisplayXFieldNumber = 5,
    kDisplayYFieldNumber = 6,
    kQuantityFieldNumber = 10,
    kSelectedFieldNumber = 7,
    kActiveFieldNumber = 8,
    kIsDeactivatingFieldNumber = 9,
    kDisplayFieldNumber = 18,
    kLastValueFieldNumber = 11,
  };
  // repeated .UITreeNodePB children = 17;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::UITreeNodePB* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UITreeNodePB >*
      mutable_children();
  private:
  const ::UITreeNodePB& _internal_children(int index) const;
  ::UITreeNodePB* _internal_add_children();
  public:
  const ::UITreeNodePB& children(int index) const;
  ::UITreeNodePB* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UITreeNodePB >&
      children() const;

  // bytes _name = 12;
  void clear__name();
  const std::string& _name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__name(ArgT0&& arg0, ArgT... args);
  std::string* mutable__name();
  PROTOBUF_NODISCARD std::string* release__name();
  void set_allocated__name(std::string* _name);
  private:
  const std::string& _internal__name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__name(const std::string& value);
  std::string* _internal_mutable__name();
  public:

  // bytes _text = 13;
  void clear__text();
  const std::string& _text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__text(ArgT0&& arg0, ArgT... args);
  std::string* mutable__text();
  PROTOBUF_NODISCARD std::string* release__text();
  void set_allocated__text(std::string* _text);
  private:
  const std::string& _internal__text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__text(const std::string& value);
  std::string* _internal_mutable__text();
  public:

  // bytes _setText = 14;
  void clear__settext();
  const std::string& _settext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__settext(ArgT0&& arg0, ArgT... args);
  std::string* mutable__settext();
  PROTOBUF_NODISCARD std::string* release__settext();
  void set_allocated__settext(std::string* _settext);
  private:
  const std::string& _internal__settext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__settext(const std::string& value);
  std::string* _internal_mutable__settext();
  public:

  // bytes _hint = 15;
  void clear__hint();
  const std::string& _hint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__hint(ArgT0&& arg0, ArgT... args);
  std::string* mutable__hint();
  PROTOBUF_NODISCARD std::string* release__hint();
  void set_allocated__hint(std::string* _hint);
  private:
  const std::string& _internal__hint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__hint(const std::string& value);
  std::string* _internal_mutable__hint();
  public:

  // string python_object_type_name = 16;
  void clear_python_object_type_name();
  const std::string& python_object_type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_python_object_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_python_object_type_name();
  PROTOBUF_NODISCARD std::string* release_python_object_type_name();
  void set_allocated_python_object_type_name(std::string* python_object_type_name);
  private:
  const std::string& _internal_python_object_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_python_object_type_name(const std::string& value);
  std::string* _internal_mutable_python_object_type_name();
  public:

  // sfixed32 _top = 1;
  void clear__top();
  int32_t _top() const;
  void set__top(int32_t value);
  private:
  int32_t _internal__top() const;
  void _internal_set__top(int32_t value);
  public:

  // sfixed32 _left = 2;
  void clear__left();
  int32_t _left() const;
  void set__left(int32_t value);
  private:
  int32_t _internal__left() const;
  void _internal_set__left(int32_t value);
  public:

  // sfixed32 _width = 3;
  void clear__width();
  int32_t _width() const;
  void set__width(int32_t value);
  private:
  int32_t _internal__width() const;
  void _internal_set__width(int32_t value);
  public:

  // sfixed32 _height = 4;
  void clear__height();
  int32_t _height() const;
  void set__height(int32_t value);
  private:
  int32_t _internal__height() const;
  void _internal_set__height(int32_t value);
  public:

  // sfixed32 _displayX = 5;
  void clear__displayx();
  int32_t _displayx() const;
  void set__displayx(int32_t value);
  private:
  int32_t _internal__displayx() const;
  void _internal_set__displayx(int32_t value);
  public:

  // sfixed32 _displayY = 6;
  void clear__displayy();
  int32_t _displayy() const;
  void set__displayy(int32_t value);
  private:
  int32_t _internal__displayy() const;
  void _internal_set__displayy(int32_t value);
  public:

  // sfixed32 quantity = 10;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // bool _selected = 7;
  void clear__selected();
  bool _selected() const;
  void set__selected(bool value);
  private:
  bool _internal__selected() const;
  void _internal_set__selected(bool value);
  public:

  // bool active = 8;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // bool isDeactivating = 9;
  void clear_isdeactivating();
  bool isdeactivating() const;
  void set_isdeactivating(bool value);
  private:
  bool _internal_isdeactivating() const;
  void _internal_set_isdeactivating(bool value);
  public:

  // bool display = 18;
  void clear_display();
  bool display() const;
  void set_display(bool value);
  private:
  bool _internal_display() const;
  void _internal_set_display(bool value);
  public:

  // double _lastValue = 11;
  void clear__lastvalue();
  double _lastvalue() const;
  void set__lastvalue(double value);
  private:
  double _internal__lastvalue() const;
  void _internal_set__lastvalue(double value);
  public:

  // @@protoc_insertion_point(class_scope:UITreeNodePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UITreeNodePB > children_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _settext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _hint_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr python_object_type_name_;
    int32_t _top_;
    int32_t _left_;
    int32_t _width_;
    int32_t _height_;
    int32_t _displayx_;
    int32_t _displayy_;
    int32_t quantity_;
    bool _selected_;
    bool active_;
    bool isdeactivating_;
    bool display_;
    double _lastvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UITreeNodePB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UITreeNodePB

// sfixed32 _top = 1;
inline void UITreeNodePB::clear__top() {
  _impl_._top_ = 0;
}
inline int32_t UITreeNodePB::_internal__top() const {
  return _impl_._top_;
}
inline int32_t UITreeNodePB::_top() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._top)
  return _internal__top();
}
inline void UITreeNodePB::_internal_set__top(int32_t value) {
  
  _impl_._top_ = value;
}
inline void UITreeNodePB::set__top(int32_t value) {
  _internal_set__top(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._top)
}

// sfixed32 _left = 2;
inline void UITreeNodePB::clear__left() {
  _impl_._left_ = 0;
}
inline int32_t UITreeNodePB::_internal__left() const {
  return _impl_._left_;
}
inline int32_t UITreeNodePB::_left() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._left)
  return _internal__left();
}
inline void UITreeNodePB::_internal_set__left(int32_t value) {
  
  _impl_._left_ = value;
}
inline void UITreeNodePB::set__left(int32_t value) {
  _internal_set__left(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._left)
}

// sfixed32 _width = 3;
inline void UITreeNodePB::clear__width() {
  _impl_._width_ = 0;
}
inline int32_t UITreeNodePB::_internal__width() const {
  return _impl_._width_;
}
inline int32_t UITreeNodePB::_width() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._width)
  return _internal__width();
}
inline void UITreeNodePB::_internal_set__width(int32_t value) {
  
  _impl_._width_ = value;
}
inline void UITreeNodePB::set__width(int32_t value) {
  _internal_set__width(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._width)
}

// sfixed32 _height = 4;
inline void UITreeNodePB::clear__height() {
  _impl_._height_ = 0;
}
inline int32_t UITreeNodePB::_internal__height() const {
  return _impl_._height_;
}
inline int32_t UITreeNodePB::_height() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._height)
  return _internal__height();
}
inline void UITreeNodePB::_internal_set__height(int32_t value) {
  
  _impl_._height_ = value;
}
inline void UITreeNodePB::set__height(int32_t value) {
  _internal_set__height(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._height)
}

// sfixed32 _displayX = 5;
inline void UITreeNodePB::clear__displayx() {
  _impl_._displayx_ = 0;
}
inline int32_t UITreeNodePB::_internal__displayx() const {
  return _impl_._displayx_;
}
inline int32_t UITreeNodePB::_displayx() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._displayX)
  return _internal__displayx();
}
inline void UITreeNodePB::_internal_set__displayx(int32_t value) {
  
  _impl_._displayx_ = value;
}
inline void UITreeNodePB::set__displayx(int32_t value) {
  _internal_set__displayx(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._displayX)
}

// sfixed32 _displayY = 6;
inline void UITreeNodePB::clear__displayy() {
  _impl_._displayy_ = 0;
}
inline int32_t UITreeNodePB::_internal__displayy() const {
  return _impl_._displayy_;
}
inline int32_t UITreeNodePB::_displayy() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._displayY)
  return _internal__displayy();
}
inline void UITreeNodePB::_internal_set__displayy(int32_t value) {
  
  _impl_._displayy_ = value;
}
inline void UITreeNodePB::set__displayy(int32_t value) {
  _internal_set__displayy(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._displayY)
}

// bool _selected = 7;
inline void UITreeNodePB::clear__selected() {
  _impl_._selected_ = false;
}
inline bool UITreeNodePB::_internal__selected() const {
  return _impl_._selected_;
}
inline bool UITreeNodePB::_selected() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._selected)
  return _internal__selected();
}
inline void UITreeNodePB::_internal_set__selected(bool value) {
  
  _impl_._selected_ = value;
}
inline void UITreeNodePB::set__selected(bool value) {
  _internal_set__selected(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._selected)
}

// bool active = 8;
inline void UITreeNodePB::clear_active() {
  _impl_.active_ = false;
}
inline bool UITreeNodePB::_internal_active() const {
  return _impl_.active_;
}
inline bool UITreeNodePB::active() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB.active)
  return _internal_active();
}
inline void UITreeNodePB::_internal_set_active(bool value) {
  
  _impl_.active_ = value;
}
inline void UITreeNodePB::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB.active)
}

// bool isDeactivating = 9;
inline void UITreeNodePB::clear_isdeactivating() {
  _impl_.isdeactivating_ = false;
}
inline bool UITreeNodePB::_internal_isdeactivating() const {
  return _impl_.isdeactivating_;
}
inline bool UITreeNodePB::isdeactivating() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB.isDeactivating)
  return _internal_isdeactivating();
}
inline void UITreeNodePB::_internal_set_isdeactivating(bool value) {
  
  _impl_.isdeactivating_ = value;
}
inline void UITreeNodePB::set_isdeactivating(bool value) {
  _internal_set_isdeactivating(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB.isDeactivating)
}

// sfixed32 quantity = 10;
inline void UITreeNodePB::clear_quantity() {
  _impl_.quantity_ = 0;
}
inline int32_t UITreeNodePB::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int32_t UITreeNodePB::quantity() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB.quantity)
  return _internal_quantity();
}
inline void UITreeNodePB::_internal_set_quantity(int32_t value) {
  
  _impl_.quantity_ = value;
}
inline void UITreeNodePB::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB.quantity)
}

// double _lastValue = 11;
inline void UITreeNodePB::clear__lastvalue() {
  _impl_._lastvalue_ = 0;
}
inline double UITreeNodePB::_internal__lastvalue() const {
  return _impl_._lastvalue_;
}
inline double UITreeNodePB::_lastvalue() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._lastValue)
  return _internal__lastvalue();
}
inline void UITreeNodePB::_internal_set__lastvalue(double value) {
  
  _impl_._lastvalue_ = value;
}
inline void UITreeNodePB::set__lastvalue(double value) {
  _internal_set__lastvalue(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB._lastValue)
}

// bool display = 18;
inline void UITreeNodePB::clear_display() {
  _impl_.display_ = false;
}
inline bool UITreeNodePB::_internal_display() const {
  return _impl_.display_;
}
inline bool UITreeNodePB::display() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB.display)
  return _internal_display();
}
inline void UITreeNodePB::_internal_set_display(bool value) {
  
  _impl_.display_ = value;
}
inline void UITreeNodePB::set_display(bool value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:UITreeNodePB.display)
}

// bytes _name = 12;
inline void UITreeNodePB::clear__name() {
  _impl_._name_.ClearToEmpty();
}
inline const std::string& UITreeNodePB::_name() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._name)
  return _internal__name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UITreeNodePB::set__name(ArgT0&& arg0, ArgT... args) {
 
 _impl_._name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UITreeNodePB._name)
}
inline std::string* UITreeNodePB::mutable__name() {
  std::string* _s = _internal_mutable__name();
  // @@protoc_insertion_point(field_mutable:UITreeNodePB._name)
  return _s;
}
inline const std::string& UITreeNodePB::_internal__name() const {
  return _impl_._name_.Get();
}
inline void UITreeNodePB::_internal_set__name(const std::string& value) {
  
  _impl_._name_.Set(value, GetArenaForAllocation());
}
inline std::string* UITreeNodePB::_internal_mutable__name() {
  
  return _impl_._name_.Mutable(GetArenaForAllocation());
}
inline std::string* UITreeNodePB::release__name() {
  // @@protoc_insertion_point(field_release:UITreeNodePB._name)
  return _impl_._name_.Release();
}
inline void UITreeNodePB::set_allocated__name(std::string* _name) {
  if (_name != nullptr) {
    
  } else {
    
  }
  _impl_._name_.SetAllocated(_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._name_.IsDefault()) {
    _impl_._name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UITreeNodePB._name)
}

// bytes _text = 13;
inline void UITreeNodePB::clear__text() {
  _impl_._text_.ClearToEmpty();
}
inline const std::string& UITreeNodePB::_text() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._text)
  return _internal__text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UITreeNodePB::set__text(ArgT0&& arg0, ArgT... args) {
 
 _impl_._text_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UITreeNodePB._text)
}
inline std::string* UITreeNodePB::mutable__text() {
  std::string* _s = _internal_mutable__text();
  // @@protoc_insertion_point(field_mutable:UITreeNodePB._text)
  return _s;
}
inline const std::string& UITreeNodePB::_internal__text() const {
  return _impl_._text_.Get();
}
inline void UITreeNodePB::_internal_set__text(const std::string& value) {
  
  _impl_._text_.Set(value, GetArenaForAllocation());
}
inline std::string* UITreeNodePB::_internal_mutable__text() {
  
  return _impl_._text_.Mutable(GetArenaForAllocation());
}
inline std::string* UITreeNodePB::release__text() {
  // @@protoc_insertion_point(field_release:UITreeNodePB._text)
  return _impl_._text_.Release();
}
inline void UITreeNodePB::set_allocated__text(std::string* _text) {
  if (_text != nullptr) {
    
  } else {
    
  }
  _impl_._text_.SetAllocated(_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._text_.IsDefault()) {
    _impl_._text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UITreeNodePB._text)
}

// bytes _setText = 14;
inline void UITreeNodePB::clear__settext() {
  _impl_._settext_.ClearToEmpty();
}
inline const std::string& UITreeNodePB::_settext() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._setText)
  return _internal__settext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UITreeNodePB::set__settext(ArgT0&& arg0, ArgT... args) {
 
 _impl_._settext_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UITreeNodePB._setText)
}
inline std::string* UITreeNodePB::mutable__settext() {
  std::string* _s = _internal_mutable__settext();
  // @@protoc_insertion_point(field_mutable:UITreeNodePB._setText)
  return _s;
}
inline const std::string& UITreeNodePB::_internal__settext() const {
  return _impl_._settext_.Get();
}
inline void UITreeNodePB::_internal_set__settext(const std::string& value) {
  
  _impl_._settext_.Set(value, GetArenaForAllocation());
}
inline std::string* UITreeNodePB::_internal_mutable__settext() {
  
  return _impl_._settext_.Mutable(GetArenaForAllocation());
}
inline std::string* UITreeNodePB::release__settext() {
  // @@protoc_insertion_point(field_release:UITreeNodePB._setText)
  return _impl_._settext_.Release();
}
inline void UITreeNodePB::set_allocated__settext(std::string* _settext) {
  if (_settext != nullptr) {
    
  } else {
    
  }
  _impl_._settext_.SetAllocated(_settext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._settext_.IsDefault()) {
    _impl_._settext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UITreeNodePB._setText)
}

// bytes _hint = 15;
inline void UITreeNodePB::clear__hint() {
  _impl_._hint_.ClearToEmpty();
}
inline const std::string& UITreeNodePB::_hint() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB._hint)
  return _internal__hint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UITreeNodePB::set__hint(ArgT0&& arg0, ArgT... args) {
 
 _impl_._hint_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UITreeNodePB._hint)
}
inline std::string* UITreeNodePB::mutable__hint() {
  std::string* _s = _internal_mutable__hint();
  // @@protoc_insertion_point(field_mutable:UITreeNodePB._hint)
  return _s;
}
inline const std::string& UITreeNodePB::_internal__hint() const {
  return _impl_._hint_.Get();
}
inline void UITreeNodePB::_internal_set__hint(const std::string& value) {
  
  _impl_._hint_.Set(value, GetArenaForAllocation());
}
inline std::string* UITreeNodePB::_internal_mutable__hint() {
  
  return _impl_._hint_.Mutable(GetArenaForAllocation());
}
inline std::string* UITreeNodePB::release__hint() {
  // @@protoc_insertion_point(field_release:UITreeNodePB._hint)
  return _impl_._hint_.Release();
}
inline void UITreeNodePB::set_allocated__hint(std::string* _hint) {
  if (_hint != nullptr) {
    
  } else {
    
  }
  _impl_._hint_.SetAllocated(_hint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._hint_.IsDefault()) {
    _impl_._hint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UITreeNodePB._hint)
}

// string python_object_type_name = 16;
inline void UITreeNodePB::clear_python_object_type_name() {
  _impl_.python_object_type_name_.ClearToEmpty();
}
inline const std::string& UITreeNodePB::python_object_type_name() const {
  // @@protoc_insertion_point(field_get:UITreeNodePB.python_object_type_name)
  return _internal_python_object_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UITreeNodePB::set_python_object_type_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.python_object_type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UITreeNodePB.python_object_type_name)
}
inline std::string* UITreeNodePB::mutable_python_object_type_name() {
  std::string* _s = _internal_mutable_python_object_type_name();
  // @@protoc_insertion_point(field_mutable:UITreeNodePB.python_object_type_name)
  return _s;
}
inline const std::string& UITreeNodePB::_internal_python_object_type_name() const {
  return _impl_.python_object_type_name_.Get();
}
inline void UITreeNodePB::_internal_set_python_object_type_name(const std::string& value) {
  
  _impl_.python_object_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UITreeNodePB::_internal_mutable_python_object_type_name() {
  
  return _impl_.python_object_type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UITreeNodePB::release_python_object_type_name() {
  // @@protoc_insertion_point(field_release:UITreeNodePB.python_object_type_name)
  return _impl_.python_object_type_name_.Release();
}
inline void UITreeNodePB::set_allocated_python_object_type_name(std::string* python_object_type_name) {
  if (python_object_type_name != nullptr) {
    
  } else {
    
  }
  _impl_.python_object_type_name_.SetAllocated(python_object_type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.python_object_type_name_.IsDefault()) {
    _impl_.python_object_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UITreeNodePB.python_object_type_name)
}

// repeated .UITreeNodePB children = 17;
inline int UITreeNodePB::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int UITreeNodePB::children_size() const {
  return _internal_children_size();
}
inline void UITreeNodePB::clear_children() {
  _impl_.children_.Clear();
}
inline ::UITreeNodePB* UITreeNodePB::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:UITreeNodePB.children)
  return _impl_.children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UITreeNodePB >*
UITreeNodePB::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:UITreeNodePB.children)
  return &_impl_.children_;
}
inline const ::UITreeNodePB& UITreeNodePB::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline const ::UITreeNodePB& UITreeNodePB::children(int index) const {
  // @@protoc_insertion_point(field_get:UITreeNodePB.children)
  return _internal_children(index);
}
inline ::UITreeNodePB* UITreeNodePB::_internal_add_children() {
  return _impl_.children_.Add();
}
inline ::UITreeNodePB* UITreeNodePB::add_children() {
  ::UITreeNodePB* _add = _internal_add_children();
  // @@protoc_insertion_point(field_add:UITreeNodePB.children)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UITreeNodePB >&
UITreeNodePB::children() const {
  // @@protoc_insertion_point(field_list:UITreeNodePB.children)
  return _impl_.children_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UITreeNodePB_2eproto
