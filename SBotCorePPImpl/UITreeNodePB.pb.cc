// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UITreeNodePB.proto

#include "UITreeNodePB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR UITreeNodePB::UITreeNodePB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_._name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._settext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._hint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.python_object_type_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._top_)*/0
  , /*decltype(_impl_._left_)*/0
  , /*decltype(_impl_._width_)*/0
  , /*decltype(_impl_._height_)*/0
  , /*decltype(_impl_._displayx_)*/0
  , /*decltype(_impl_._displayy_)*/0
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._selected_)*/false
  , /*decltype(_impl_.active_)*/false
  , /*decltype(_impl_.isdeactivating_)*/false
  , /*decltype(_impl_.display_)*/false
  , /*decltype(_impl_._lastvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UITreeNodePBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UITreeNodePBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UITreeNodePBDefaultTypeInternal() {}
  union {
    UITreeNodePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UITreeNodePBDefaultTypeInternal _UITreeNodePB_default_instance_;

// ===================================================================

class UITreeNodePB::_Internal {
 public:
};

UITreeNodePB::UITreeNodePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:UITreeNodePB)
}
UITreeNodePB::UITreeNodePB(const UITreeNodePB& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UITreeNodePB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_._name_){}
    , decltype(_impl_._text_){}
    , decltype(_impl_._settext_){}
    , decltype(_impl_._hint_){}
    , decltype(_impl_.python_object_type_name_){}
    , decltype(_impl_._top_){}
    , decltype(_impl_._left_){}
    , decltype(_impl_._width_){}
    , decltype(_impl_._height_){}
    , decltype(_impl_._displayx_){}
    , decltype(_impl_._displayy_){}
    , decltype(_impl_.quantity_){}
    , decltype(_impl_._selected_){}
    , decltype(_impl_.active_){}
    , decltype(_impl_.isdeactivating_){}
    , decltype(_impl_.display_){}
    , decltype(_impl_._lastvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_._name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__name().empty()) {
    _this->_impl_._name_.Set(from._internal__name(), 
      _this->GetArenaForAllocation());
  }
  _impl_._text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__text().empty()) {
    _this->_impl_._text_.Set(from._internal__text(), 
      _this->GetArenaForAllocation());
  }
  _impl_._settext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._settext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__settext().empty()) {
    _this->_impl_._settext_.Set(from._internal__settext(), 
      _this->GetArenaForAllocation());
  }
  _impl_._hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal__hint().empty()) {
    _this->_impl_._hint_.Set(from._internal__hint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.python_object_type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.python_object_type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_python_object_type_name().empty()) {
    _this->_impl_.python_object_type_name_.Set(from._internal_python_object_type_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_._top_, &from._impl_._top_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_._lastvalue_) -
    reinterpret_cast<char*>(&_impl_._top_)) + sizeof(_impl_._lastvalue_));
  // @@protoc_insertion_point(copy_constructor:UITreeNodePB)
}

inline void UITreeNodePB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , decltype(_impl_._name_){}
    , decltype(_impl_._text_){}
    , decltype(_impl_._settext_){}
    , decltype(_impl_._hint_){}
    , decltype(_impl_.python_object_type_name_){}
    , decltype(_impl_._top_){0}
    , decltype(_impl_._left_){0}
    , decltype(_impl_._width_){0}
    , decltype(_impl_._height_){0}
    , decltype(_impl_._displayx_){0}
    , decltype(_impl_._displayy_){0}
    , decltype(_impl_.quantity_){0}
    , decltype(_impl_._selected_){false}
    , decltype(_impl_.active_){false}
    , decltype(_impl_.isdeactivating_){false}
    , decltype(_impl_.display_){false}
    , decltype(_impl_._lastvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_._name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_._text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_._settext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._settext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_._hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_._hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.python_object_type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.python_object_type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UITreeNodePB::~UITreeNodePB() {
  // @@protoc_insertion_point(destructor:UITreeNodePB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UITreeNodePB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_._name_.Destroy();
  _impl_._text_.Destroy();
  _impl_._settext_.Destroy();
  _impl_._hint_.Destroy();
  _impl_.python_object_type_name_.Destroy();
}

void UITreeNodePB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UITreeNodePB::Clear() {
// @@protoc_insertion_point(message_clear_start:UITreeNodePB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_._name_.ClearToEmpty();
  _impl_._text_.ClearToEmpty();
  _impl_._settext_.ClearToEmpty();
  _impl_._hint_.ClearToEmpty();
  _impl_.python_object_type_name_.ClearToEmpty();
  ::memset(&_impl_._top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_._lastvalue_) -
      reinterpret_cast<char*>(&_impl_._top_)) + sizeof(_impl_._lastvalue_));
  _internal_metadata_.Clear<std::string>();
}

const char* UITreeNodePB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sfixed32 _top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_._top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 _left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_._left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 _width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_._width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 _height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_._height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 _displayX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_._displayx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 _displayY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_._displayy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // bool _selected = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_._selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool active = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isDeactivating = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.isdeactivating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 quantity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // double _lastValue = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_._lastvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes _name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable__name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes _text = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable__text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes _setText = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable__settext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes _hint = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable__hint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string python_object_type_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_python_object_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .UITreeNodePB children = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool display = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UITreeNodePB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UITreeNodePB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 _top = 1;
  if (this->_internal__top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(1, this->_internal__top(), target);
  }

  // sfixed32 _left = 2;
  if (this->_internal__left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(2, this->_internal__left(), target);
  }

  // sfixed32 _width = 3;
  if (this->_internal__width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(3, this->_internal__width(), target);
  }

  // sfixed32 _height = 4;
  if (this->_internal__height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(4, this->_internal__height(), target);
  }

  // sfixed32 _displayX = 5;
  if (this->_internal__displayx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(5, this->_internal__displayx(), target);
  }

  // sfixed32 _displayY = 6;
  if (this->_internal__displayy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(6, this->_internal__displayy(), target);
  }

  // bool _selected = 7;
  if (this->_internal__selected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal__selected(), target);
  }

  // bool active = 8;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_active(), target);
  }

  // bool isDeactivating = 9;
  if (this->_internal_isdeactivating() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isdeactivating(), target);
  }

  // sfixed32 quantity = 10;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(10, this->_internal_quantity(), target);
  }

  // double _lastValue = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp__lastvalue = this->_internal__lastvalue();
  uint64_t raw__lastvalue;
  memcpy(&raw__lastvalue, &tmp__lastvalue, sizeof(tmp__lastvalue));
  if (raw__lastvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal__lastvalue(), target);
  }

  // bytes _name = 12;
  if (!this->_internal__name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal__name(), target);
  }

  // bytes _text = 13;
  if (!this->_internal__text().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal__text(), target);
  }

  // bytes _setText = 14;
  if (!this->_internal__settext().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal__settext(), target);
  }

  // bytes _hint = 15;
  if (!this->_internal__hint().empty()) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal__hint(), target);
  }

  // string python_object_type_name = 16;
  if (!this->_internal_python_object_type_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_python_object_type_name().data(), static_cast<int>(this->_internal_python_object_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UITreeNodePB.python_object_type_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_python_object_type_name(), target);
  }

  // repeated .UITreeNodePB children = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool display = 18;
  if (this->_internal_display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UITreeNodePB)
  return target;
}

size_t UITreeNodePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UITreeNodePB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UITreeNodePB children = 17;
  total_size += 2UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes _name = 12;
  if (!this->_internal__name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__name());
  }

  // bytes _text = 13;
  if (!this->_internal__text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__text());
  }

  // bytes _setText = 14;
  if (!this->_internal__settext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__settext());
  }

  // bytes _hint = 15;
  if (!this->_internal__hint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal__hint());
  }

  // string python_object_type_name = 16;
  if (!this->_internal_python_object_type_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_python_object_type_name());
  }

  // sfixed32 _top = 1;
  if (this->_internal__top() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 _left = 2;
  if (this->_internal__left() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 _width = 3;
  if (this->_internal__width() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 _height = 4;
  if (this->_internal__height() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 _displayX = 5;
  if (this->_internal__displayx() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 _displayY = 6;
  if (this->_internal__displayy() != 0) {
    total_size += 1 + 4;
  }

  // sfixed32 quantity = 10;
  if (this->_internal_quantity() != 0) {
    total_size += 1 + 4;
  }

  // bool _selected = 7;
  if (this->_internal__selected() != 0) {
    total_size += 1 + 1;
  }

  // bool active = 8;
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  // bool isDeactivating = 9;
  if (this->_internal_isdeactivating() != 0) {
    total_size += 1 + 1;
  }

  // bool display = 18;
  if (this->_internal_display() != 0) {
    total_size += 2 + 1;
  }

  // double _lastValue = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp__lastvalue = this->_internal__lastvalue();
  uint64_t raw__lastvalue;
  memcpy(&raw__lastvalue, &tmp__lastvalue, sizeof(tmp__lastvalue));
  if (raw__lastvalue != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UITreeNodePB::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UITreeNodePB*>(
      &from));
}

void UITreeNodePB::MergeFrom(const UITreeNodePB& from) {
  UITreeNodePB* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:UITreeNodePB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal__name().empty()) {
    _this->_internal_set__name(from._internal__name());
  }
  if (!from._internal__text().empty()) {
    _this->_internal_set__text(from._internal__text());
  }
  if (!from._internal__settext().empty()) {
    _this->_internal_set__settext(from._internal__settext());
  }
  if (!from._internal__hint().empty()) {
    _this->_internal_set__hint(from._internal__hint());
  }
  if (!from._internal_python_object_type_name().empty()) {
    _this->_internal_set_python_object_type_name(from._internal_python_object_type_name());
  }
  if (from._internal__top() != 0) {
    _this->_internal_set__top(from._internal__top());
  }
  if (from._internal__left() != 0) {
    _this->_internal_set__left(from._internal__left());
  }
  if (from._internal__width() != 0) {
    _this->_internal_set__width(from._internal__width());
  }
  if (from._internal__height() != 0) {
    _this->_internal_set__height(from._internal__height());
  }
  if (from._internal__displayx() != 0) {
    _this->_internal_set__displayx(from._internal__displayx());
  }
  if (from._internal__displayy() != 0) {
    _this->_internal_set__displayy(from._internal__displayy());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal__selected() != 0) {
    _this->_internal_set__selected(from._internal__selected());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  if (from._internal_isdeactivating() != 0) {
    _this->_internal_set_isdeactivating(from._internal_isdeactivating());
  }
  if (from._internal_display() != 0) {
    _this->_internal_set_display(from._internal_display());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp__lastvalue = from._internal__lastvalue();
  uint64_t raw__lastvalue;
  memcpy(&raw__lastvalue, &tmp__lastvalue, sizeof(tmp__lastvalue));
  if (raw__lastvalue != 0) {
    _this->_internal_set__lastvalue(from._internal__lastvalue());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UITreeNodePB::CopyFrom(const UITreeNodePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UITreeNodePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UITreeNodePB::IsInitialized() const {
  return true;
}

void UITreeNodePB::InternalSwap(UITreeNodePB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._name_, lhs_arena,
      &other->_impl_._name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._text_, lhs_arena,
      &other->_impl_._text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._settext_, lhs_arena,
      &other->_impl_._settext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_._hint_, lhs_arena,
      &other->_impl_._hint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.python_object_type_name_, lhs_arena,
      &other->_impl_.python_object_type_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UITreeNodePB, _impl_._lastvalue_)
      + sizeof(UITreeNodePB::_impl_._lastvalue_)
      - PROTOBUF_FIELD_OFFSET(UITreeNodePB, _impl_._top_)>(
          reinterpret_cast<char*>(&_impl_._top_),
          reinterpret_cast<char*>(&other->_impl_._top_));
}

std::string UITreeNodePB::GetTypeName() const {
  return "UITreeNodePB";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UITreeNodePB*
Arena::CreateMaybeMessage< ::UITreeNodePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UITreeNodePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
